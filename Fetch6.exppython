#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain = Brain()

# Robot configuration code
brain_inertial = Inertial()
left_drive_smart = Motor(Ports.PORT6, False)
right_drive_smart = Motor(Ports.PORT10, True)
drivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 259.34, 320, 40, MM, 1)
optical_1 = Optical(Ports.PORT1)
distance_2 = Distance(Ports.PORT2)
motor_4 = Motor(Ports.PORT4, False)
motor_3 = Motor(Ports.PORT3, False)


# Wait for sensor(s) to fully initialize
wait(100, MSEC)

# generating and setting random seed
def initializeRandomSeed():
    wait(100, MSEC)
    xaxis = brain_inertial.acceleration(XAXIS) * 1000
    yaxis = brain_inertial.acceleration(YAXIS) * 1000
    zaxis = brain_inertial.acceleration(ZAXIS) * 1000
    systemTime = brain.timer.system() * 100
    urandom.seed(int(xaxis + yaxis + zaxis + systemTime)) 

# Initialize random seed 
initializeRandomSeed()

vexcode_initial_drivetrain_calibration_completed = False
def calibrate_drivetrain():
    # Calibrate the Drivetrain Inertial
    global vexcode_initial_drivetrain_calibration_completed
    sleep(200, MSEC)
    brain.screen.print("Calibrating")
    brain.screen.next_row()
    brain.screen.print("Inertial")
    brain_inertial.calibrate()
    while brain_inertial.is_calibrating():
        sleep(25, MSEC)
    vexcode_initial_drivetrain_calibration_completed = True
    brain.screen.clear_screen()
    brain.screen.set_cursor(1, 1)


# Calibrate the Drivetrain
calibrate_drivetrain()

#endregion VEXcode Generated Robot Configuration
from vex import *
import urandom

brain = Brain()
brain_inertial = Inertial()
left_drive_smart = Motor(Ports.PORT6, False)
right_drive_smart = Motor(Ports.PORT10, True)
drivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 259.34, 320, 40, MM, 1)
optical_1 = Optical(Ports.PORT1)
distance_2 = Distance(Ports.PORT2)
motor_3 = Motor(Ports.PORT3, False)  # Claw up/down 
motor_4 = Motor(Ports.PORT4, False)  #Claw grab

wait(100, MSEC)

def track_red_object():
    RED_HUE_MIN = 0
    RED_HUE_MAX = 30
    last_distance = 0
    arm_raised = False
    movement_log = [] #This is for the tracking the movement to return 

    motor_3.set_velocity(30, PERCENT)

    while True:
        optical_1.set_light(LedStateType.ON)
        distance = distance_2.object_distance(MM)
        hue = optical_1.hue()
        red_detected = optical_1.is_near_object() and RED_HUE_MIN <= hue <= RED_HUE_MAX

        print("Hue: {:.2f}, Distance: {:.2f} mm".format(hue, distance)) #print distance at console 

        if red_detected:
            if 10 <= distance <= 20:
                drivetrain.stop() #when it has found the red object and grab it 
                print("Red object in range! Grabbing...")

                motor_4.spin_for(FORWARD, 90, DEGREES) #spin the claw forward 90 degree to grab the object
                wait(300, MSEC) #wait 0.3 sec 

                last_distance = distance # store the current distance from the object
                arm_raised = True # Set a flag to remember that the arm has been lifted

                print("Lifting arm...")
                motor_3.set_max_torque(100, PERCENT)
                motor_3.spin_for(FORWARD, 300, DEGREES) #lift up for 300 degree 
                wait(200, MSEC) #wait for 0.2 sec

                print("Object secured. Returning to start...")

                # Reverse the movement
                for action in reversed(movement_log):
                    if action[0] == "move":
                        drivetrain.drive_for(REVERSE, action[1], action[2])
                    elif action[0] == "turn":
                        # turn back opposite direction
                        reverse_dir = RIGHT if action[2] == LEFT else LEFT
                        drivetrain.turn_for(reverse_dir, action[1], DEGREES)

                motor_3.spin_for(REVERSE, 300, DEGREES)
                motor_4.spin_for(REVERSE, 100, DEGREES)

                print("Object dropped at start point. Done.")
                break

            elif distance > 20:
                print("Approaching red object...")
                drivetrain.set_drive_velocity(15, PERCENT) #so it doesn't bounce the ball
                drivetrain.drive_for(FORWARD, 50, MM) #move forward to approach the ball 
                movement_log.append(("move", 50, MM))

            elif arm_raised and distance < last_distance - 10:
                print("Object moved up! Lifting more...")
                motor_3.spin_for(FORWARD, 50, DEGREES) 
                last_distance = distance

            # else:
            #     drivetrain.stop()
            #     print("Too close! Holding position.")
        else:
            drivetrain.set_drive_velocity(30, PERCENT)
            drivetrain.turn_for(LEFT, 45, DEGREES)  # turn a little to search the red object 
            movement_log.append(("turn", 45, LEFT))
            drivetrain.drive_for(FORWARD, 150, MM) #go forward 150 MM to search red object 
            movement_log.append(("move", 150, MM))
            print("Searching for red object...")

        wait(100, MSEC)



track_red_object() 
